"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t=t=>"object"==typeof t&&null!==t,e=t=>{let e=t,r=[];for(;e.p&&(r.push(e.k),e=e.p,!("op"in e)););return"op"in e?[e,r.reverse()]:null},r=(t,e)=>{var r;return t.c=null!==(r=t.c)&&void 0!==r?r:{},t.c[e]||(t.c[e]={p:t,k:e}),t.c[e]},o=(r,o,s)=>{var i;if("op"in r)return void(s===u?("new"in r&&delete r.new,Object.assign(r,{op:"remove"})):Object.assign(r,{new:s,op:"remove"===r.op?"replace":r.op}));const a=e(r);if(a){const[e,o]=a;if("new"in e){let n=e.new;o.pop(),o.forEach((e=>{if(!t(n))throw new Error(`We tried to merge two new values, but the new place at ${o.join(", ")} encountered a non object at first encounter of the key ${e}`);e in n&&(n=n[e])})),s===u?delete n[r.k.toString()]:n[r.k.toString()]=s}return}let c="replace";o===u&&(c="add"),s===u&&(c="remove"),Object.assign(r,{op:c,d:!0,...o!==u?{old:o}:{},...s!==u?{new:s}:{}}),r.c&&Object.values(null!==(i=r.c)&&void 0!==i?i:{}).forEach((t=>{n(t)}))},n=r=>{const{c:o}=r;if(Object.values(null!=o?o:{}).forEach((t=>{n(t)})),"old"in r){const o=e(r);if(!o)throw new Error("We tried to merge a subtree of mutation but there was no parent with an old value above: Not sure if error");const[n,s]=o;if(!("old"in n))throw new Error("We tried to merge a subtree of mutation but there was no parent with an old value above: Not sure if error");let i=n.old;s.pop(),s.forEach((e=>{if(!t(i))throw new Error(`We tried to merge two old values, but the new place at ${s.join(", ")} encountered a non object at first encounter of the key ${e}`);e in i&&(i=i[e])})),i[r.k.toString()]=r.old}"op"in r&&(delete r.op,delete r.new,delete r.old)},s=(t,e,r=[])=>{"op"in t?e.push({op:t.op,old:"old"in t?t.old:void 0,value:"new"in t?t.new:void 0,pathArray:r,path:`/${r.join("/")}`}):t.c&&Object.values(t.c).forEach((t=>{s(t,e,[...r,t.k])}))};const i=new class{constructor(){this.proxies=new WeakSet}cache(t){this.proxies.add(t)}exists(t){return this.proxies.has(t)}};Object.freeze(i);const a=(t,e,r)=>{var o,n,s;let i=t,a=[...e];for(;a.length;){const t=a.shift();i.children=null!==(o=i.children)&&void 0!==o?o:{},i.children[t]=null!==(n=i.children[t])&&void 0!==n?n:{propName:t},i=i.children[t]}return i.subs=null!==(s=i.subs)&&void 0!==s?s:[],i.subs.push(r),i},c=(t,e)=>{var r;if(!t.subs)return!1;const o=null===(r=t.subs)||void 0===r?void 0:r.indexOf(e);if(-1===o)return!1;t.subs=[...t.subs.slice(0,o),...t.subs.slice(o+1)]},l=(t,e)=>{const r="**"===t.propName;if(!t.children)return r?[t]:null;const o=[],n=t.children[e];return r&&o.push(t),n&&o.push(n),t.children["*"]&&o.push(t.children["*"]),t.children["**"]&&o.push(t.children["**"]),o.length?o:null},h=Symbol("Patcher"),u=Symbol("NoValue"),p=Symbol("WatcherProxy"),d=Symbol("TargetRef"),y=(t,e)=>{const{op:r,pathArray:o,value:n}=t,s=o.length;if(!s)return;let i,a=e,c=a.hasOwnProperty(h)?{entity:a,pathArray:[...o]}:null;for(let t=0;t<s-1;t+=1){if(i=o[t],!a.hasOwnProperty(i))throw new Error(`applyJSONPatchOperation cannot walk json patch path ${o.join("/")}. Cannot access path ${[...o].slice(0,t).join("/")}.`);a=a[i],a.hasOwnProperty(h)&&(c={entity:a,pathArray:[...o].slice(t+1)})}const l=o[s-1];if(c&&"applyPatch"in c.entity&&"function"==typeof c.entity.applyPatch){const e=t.pathArray.filter((t=>-1!==(null==c?void 0:c.pathArray.indexOf(t)))),r=e.join("/");c.entity.applyPatch({...t,path:r,pathArray:e})}else switch(r){case"add":case"replace":Object.assign(a,{[l]:n});break;case"remove":delete a[l]}};class f{constructor(){this.mutationMaps=new Map,this.mutationDirtyPaths=new Map,this.mutationSelectorPointers=new Map,this.mutationChagnePointers=new Map,this.getSubProxy=(t,e,r,o)=>{const n=this.mutationMaps.get(t);let s=null==n?void 0:n.get(o);return s||(s=new Proxy(o,new m({target:o,selectorPointerArray:r,mutationNode:e,dirtyPaths:this.mutationDirtyPaths.get(t),proxyfyAccess:(e,r,o)=>this.getSubProxy(t,r,o,e)})),null==n||n.set(o,s)),s}}startMutation(t){this.mutationMaps.set(t,new WeakMap);const e=new WeakMap,r=new Set,o=new Array(v.getSelectorTree(t)),n={p:null,k:""};this.mutationChagnePointers.set(t,n);const s=new Proxy(t,new m({target:t,selectorPointerArray:o,mutationNode:n,dirtyPaths:r,proxyfyAccess:(e,r,o)=>this.getSubProxy(t,r,o,e)}));e.set(t,s),this.mutationDirtyPaths.set(t,r),this.mutationMaps.set(t,e),this.mutationSelectorPointers.set(t,o)}hasRoot(t){return this.mutationMaps.has(t)}commit(t){const e=this.mutationDirtyPaths.get(t);if(!e)return[];const r=Array.from(e).reduce(((t,e)=>(e.writeSelectorPointerArray.filter((t=>"root"!==t.propName)).forEach((e=>t.add(e))),t)),new Set),o=(t=>{const e=[];return s(t,e),e})(this.mutationChagnePointers.get(t));return v.runSelectorPointers(t,r,o),this.mutationMaps.delete(t),this.mutationDirtyPaths.delete(t),o}mutate(t,e){var r;const o=!this.hasRoot(t);o&&this.startMutation(t);const n=null===(r=this.mutationMaps.get(t))||void 0===r?void 0:r.get(t);if(n)return e(n),o?this.commit(t):[]}}const w=new f,g=(t,e)=>w.mutate(t,e),P=(e,r,o,n,s)=>new Proxy(e,{get:(i,c)=>{if("symbol"==typeof c&&c===p)return!0;if("symbol"==typeof c||"hasOwnProperty"===c)return Reflect.get(i,c);const l=Object.getOwnPropertyDescriptor(i.constructor.prototype,c);if(null==l?void 0:l.get)return l.get.call(P(e,r,o,n,s));{const e=i[c];return n.push(a(o,[...r,c],s)),t(e)?P(e,[...r,c],o,n,s):e}},getOwnPropertyDescriptor:(t,e)=>e===p?{configurable:!0,value:!0}:Reflect.getOwnPropertyDescriptor(t,e)});class m{constructor(t){this.deleted={},this.original={},this.writeSelectorPointerArray=[];const{target:e,proxyfyAccess:r,dirtyPaths:o}=t;this.targetRef=e,this.proxyfyAccess=r,this.dirtyPaths=o,this.selectorPointerArray=t.selectorPointerArray,this.mutationNode=t.mutationNode}get(t,e){if("symbol"==typeof e&&e===d)return this.targetRef;if("symbol"==typeof e&&e===p)return!0;if("symbol"==typeof e||"hasOwnProperty"===e)return Reflect.get(t,e);if("string"==typeof e&&this.deleted.hasOwnProperty(e))return;const o=t[e];if("object"==typeof o&&null!==o){if(i.exists(o))return o;const{selectorPointerArray:t}=this,n=t.reduce(((t,r)=>{const o=l(r,e);return o&&t.push(...o),t}),[]),s=r(this.mutationNode,e),a=this.proxyfyAccess(o,s,n);return i.exists(a)||i.cache(a),a}return o}set(t,e,n){this.writeSelectorPointerArray.push(...this.selectorPointerArray.reduce(((t,r)=>{const o=l(r,e);return o&&t.push(...o),t}),[])),this.dirtyPaths.add(this),!this.original.hasOwnProperty(e)&&t.hasOwnProperty(e)&&(this.original[e]=t[e]);let s=n;if("object"==typeof n&&null!==n){const t=n;s=t.hasOwnProperty(p)?t[d]:{...n}}let i=this.original[e];"object"==typeof i&&null!==i&&(i={...i});const a=r(this.mutationNode,e);return o(a,e in t?t[e]:u,s),Reflect.set(t,e,n)}deleteProperty(t,e){if(e in t&&"string"==typeof e){this.writeSelectorPointerArray.push(...this.selectorPointerArray.reduce(((t,r)=>{const o=l(r,e);return o&&t.push(...o),t}),[]));const n=r(this.mutationNode,e);o(n,t[e],u),this.dirtyPaths.add(this),this.deleted[e]=!0,this.original.hasOwnProperty(e)||(this.original[e]=t[e]);let s=this.original[e];"object"==typeof s&&null!==s&&(s={...s})}return Reflect.deleteProperty(t,e)}getOwnPropertyDescriptor(t,e){if("string"!=typeof e||!this.deleted[e])return e===p?{configurable:!0,value:!0}:Reflect.getOwnPropertyDescriptor(t,e)}ownKeys(t){return Reflect.ownKeys(t)}has(t,e){return Reflect.has(t,e)}}class b{constructor(){this.selectorTrees=new WeakMap}getSelectorTree(t){if(!this.selectorTrees.has(t)){const e={propName:"root"};return this.selectorTrees.set(t,e),e}return this.selectorTrees.get(t)}runSelectorPointers(t,e,r){const o=new Set,n=o.add.bind(o),s=t=>{t.forEach((t=>{const{subs:e,children:r}=t;null==e||e.forEach(n),r&&s(Object.values(r))}))};s(e),o.forEach((e=>{e(t,r)}))}}const v=new b;exports.IObservableDomain=class{},exports.MutationsManager=f,exports.NO_VALUE=u,exports.Patcher=h,exports.ProxyMutationObjectHandler=m,exports.StateTreeSelectorsManager=b,exports.TargetRef=d,exports.WatcherProxy=p,exports.applyJSONPatchOperation=y,exports.autorun=(t,e)=>{const r=v.getSelectorTree(t);let o=[];const n=()=>{o.forEach((t=>{c(t,s)}))},s=(i,a)=>{n(),o=[];const c=P(t,[],r,o,s);e(c,a)};return s(),n},exports.inversePatch=t=>{const{path:e,pathArray:r,op:o,value:n,old:s}=t;switch(o){case"add":return{op:"remove",value:s,old:n,pathArray:r,path:e};case"remove":return{op:"add",value:s,old:n,pathArray:r,path:e};case"replace":return{op:"replace",value:s,old:n,pathArray:r,path:e}}},exports.mutate=g,exports.mutateFromPatches=(t,e)=>{g(t,(t=>{for(let r=0;r<e.length;r+=1)y(e[r],t)}))},exports.pathMatchesSource=(t,e)=>{if(-1===t.indexOf("**")&&t.length!==e.length)return!1;for(let r=0;r<t.length;r+=1)if(t[r]!==e[r]&&("*"!==t[r]||!e[r])){if(r+1===t.length&&"**"===t[r]&&e[r])return!0;if(e[r]!==t[r])return!1}return!0},exports.select=(t,e,r)=>{const o=v.getSelectorTree(t),n=new Set,s=(...t)=>{const e=r(...t);return n.forEach((t=>t(e))),e},i=e.map((t=>a(o,(t=>t.startsWith("/")?t.substring(1).split("/"):t.split("/"))(t),s)));return{reshape:()=>{throw new Error("Reshape method is no longer supported")},observe:t=>(n.add(t),()=>{n.delete(t)}),dispose:()=>{for(const t of i)c(t,s)}}},exports.selectorsManager=v;
